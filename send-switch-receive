
#include <stdio.h>
#include <stdlib.h>
#include "diag/trace.h"

/* Kernel includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
#include <string.h>
#include "semphr.h"

#define CCM_RAM __attribute__((section(".ccmram")))

// ----------------------------------------------------------------------------

#include "led.h"

#define BLINK_PORT_NUMBER         (3)
#define BLINK_PIN_NUMBER_GREEN    (12)
#define BLINK_PIN_NUMBER_ORANGE   (13)
#define BLINK_PIN_NUMBER_RED      (14)
#define BLINK_PIN_NUMBER_BLUE     (15)
#define BLINK_ACTIVE_LOW          (false)

struct led blinkLeds[4];


#define PACKET_FIXED_LEN 1000
#define LINK_PROP_DELAY 200
#define PACKET_GEN_INTERVAL 200
#define TIMEOUT_PERIOD 500
#define MAX_RETRIES 4
#define P_DROP_PERCENT 1    // because double doesnot work here so
#define P_DROP_SCALE   100
#define QUEUE_SIZE 200

#define Max_num_of_packets  2000


// ----------------------------------------------------------------------------
/*-----------------------------------------------------------*/

/*
 * The LED timer callback function.  This does nothing but switch the red LED
 * off.
 */

static void prvOneShotTimerCallback( TimerHandle_t xTimer );
static void prvAutoReloadTimerCallback( TimerHandle_t xTimer );

/*-----------------------------------------------------------*/

/* The LED software timer.  This uses vLEDTimerCallback() as its callback
 * function.
 */
static TimerHandle_t xTimer1 = NULL;
static TimerHandle_t xTimer2 = NULL;
BaseType_t xTimer1Started, xTimer2Started;

/*-----------------------------------------------------------*/
// ----------------------------------------------------------------------------
//
// Semihosting STM32F4 empty sample (trace via DEBUG).
//
// Trace support is enabled by adding the TRACE macro definition.
// By default the trace messages are forwarded to the DEBUG output,
// but can be rerouted to any device or completely suppressed, by
// changing the definitions required in system/src/diag/trace-impl.c
// (currently OS_USE_TRACE_ITM, OS_USE_TRACE_SEMIHOSTING_DEBUG/_STDOUT).
//

// ----- main() ---------------------------------------------------------------

// Sample pragmas to cope with warnings. Please note the related line at
// the end of this function, used to pop the compiler diagnostics status.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#pragma GCC diagnostic ignored "-Wreturn-type"



typedef struct {
    int32_t from, to;
    int32_t seq;
    int16_t size, retries;
} Packet;

static QueueHandle_t qToSwitch, qToRx3, qToRx4;
static SemaphoreHandle_t stats_mutex;


static int32_t total_received = 0;
static int32_t total_lost = 0;

void print_final_stats(void) {
    int32_t total = total_received + total_lost;
    int32_t pct_int = 0, pct_frac = 0;
    if (total > 0) {
        int32_t pct_times_100 = (10000 * total_lost) / total; // e.g. 1234 = 12.34%
        pct_int = pct_times_100 / 100;
        pct_frac = pct_times_100 % 100;
    }
    printf("=== Simulation Complete ===\n");
    printf("Total received packets: %ld\n", (long)total_received);
    printf("Total lost packets: %ld\n", (long)total_lost);
    printf("Loss percentage: %ld.%02ld%%\n", (long)pct_int, (long)pct_frac);
}

void CheckAndReportStatsAndStop(void) {
    static int stopped = 0;
    int32_t total;
    int32_t MAX_num_of_packets = Max_num_of_packets ;
    if (stopped) return;
    xSemaphoreTake(stats_mutex, portMAX_DELAY);
    total = total_received + total_lost;
    xSemaphoreGive(stats_mutex);
    if (total >= MAX_num_of_packets && !stopped) {
        stopped = 1;
        print_final_stats();
        while (1) vTaskDelay(portMAX_DELAY);//willnot work as freertos switchs tasks unifromly
    }
}


typedef struct {
    int32_t myId;
    int32_t seq3;
    int32_t seq4;
} SenderState;

static SenderState senderStates[2];

void SenderTimerCallback(TimerHandle_t xTimer) {
    SenderState *state = (SenderState *)pvTimerGetTimerID(xTimer);

    Packet *pkt = (Packet *)pvPortMalloc(sizeof(Packet));
    if (!pkt) return;
    pkt->from = state->myId;
    pkt->to = (rand() % 2 == 0) ? 3 : 4;
    pkt->size = PACKET_FIXED_LEN;
    pkt->retries = 0;
    xSemaphoreTake(stats_mutex, portMAX_DELAY);
    if (pkt->to == 3) {
        pkt->seq = state->seq3++;
    } else {
        pkt->seq = state->seq4++;
    }
    xSemaphoreGive(stats_mutex);

    if (xQueueSend(qToSwitch, &pkt, 0) == pdPASS) {
        printf("Sender: sent to switch: from=%d to=%d seq=%ld\n", pkt->from, pkt->to, (long)pkt->seq);
    } else {
        printf("Sender: Could not send to switch queue.\n");
        vPortFree(pkt);
    }
}

void SenderTask(void *parameters) {
    SenderState *state = (SenderState *)parameters;
    TimerHandle_t timer = xTimerCreate(
        "SenderTimer",
        pdMS_TO_TICKS(PACKET_GEN_INTERVAL),
        pdTRUE, // auto-reload
        (void *)state,
        SenderTimerCallback
    );
    if (timer != NULL) {
        xTimerStart(timer, 0);
    }
    while (1) vTaskDelay(portMAX_DELAY);
}


static Packet *switchBuffer[QUEUE_SIZE];
static int switchPktCount = 0;
static SemaphoreHandle_t switch_mutex;

void SwitchTimerCallback(TimerHandle_t xTimer) {
    xSemaphoreTake(switch_mutex, portMAX_DELAY);
    for (int i = 0; i < switchPktCount; ++i) {
        Packet *pkt = switchBuffer[i];
        int drop_rand = rand() % P_DROP_SCALE; //brings the random into a range from 0  to 99 as possibilities
        if (drop_rand < P_DROP_PERCENT) {// if it lessthan 1 (=0) dropped (1 possibility out of 100)
            vPortFree(pkt);
            xSemaphoreTake(stats_mutex, portMAX_DELAY);
            total_lost++;
            xSemaphoreGive(stats_mutex);
            CheckAndReportStatsAndStop();
            continue;
        }
        if (pkt->to == 3) {
            xQueueSendToBack(qToRx3, &pkt, 0);
            printf("switch send to %d: \n", pkt->to);
        } else if (pkt->to == 4) {
            xQueueSendToBack(qToRx4, &pkt, 0);
            printf("switch send to %d: \n", pkt->to);
        } else {
            vPortFree(pkt);
        }
    }
    switchPktCount = 0;
    xSemaphoreGive(switch_mutex);
}

void SwitchTask(void *params) {
    Packet *pkt = NULL;
    switch_mutex = xSemaphoreCreateMutex();
    TimerHandle_t timer = xTimerCreate(
        "SwitchTimer",
        pdMS_TO_TICKS(LINK_PROP_DELAY),
        pdTRUE, // auto-reload
        NULL,
        SwitchTimerCallback
    );

    if (timer != NULL) xTimerStart(timer, 0);

    while (1) {
        if (xQueueReceive(qToSwitch, &pkt, pdMS_TO_TICKS(50)) == pdPASS) {
            xSemaphoreTake(switch_mutex, portMAX_DELAY);
            if (switchPktCount < QUEUE_SIZE) {
                switchBuffer[switchPktCount++] = pkt;
            } else {
                vPortFree(pkt);
                xSemaphoreTake(stats_mutex, portMAX_DELAY);
                total_lost++;
                xSemaphoreGive(stats_mutex);
                CheckAndReportStatsAndStop();
            }
            xSemaphoreGive(switch_mutex);
        }
    }
}

void ReceiverTask(void *parameters) {
    int32_t myId = (int32_t)parameters;
    Packet *pkt = NULL;
    BaseType_t status;
    int32_t expectedSeq = 0;
    const TickType_t ticksToWait = pdMS_TO_TICKS(TIMEOUT_PERIOD);

    while (1) {
        if (myId == 3) {
            status = xQueueReceive(qToRx3, &pkt, ticksToWait);
        } else {
            status = xQueueReceive(qToRx4, &pkt, ticksToWait);
        }

        if (status == pdPASS) {
            if (pkt->seq != expectedSeq) {
                for (int32_t lostSeq = expectedSeq; lostSeq < pkt->seq; ++lostSeq) {
                    printf("Packet lost at receiver %d: expected seq=%ld\n", myId, (long)lostSeq);
                    xSemaphoreTake(stats_mutex, portMAX_DELAY);
                    total_lost++;
                    xSemaphoreGive(stats_mutex);
                    CheckAndReportStatsAndStop();
                }
            }
            printf("Packet received: to=%d from=%d seq=%ld\n", pkt->to, pkt->from, (long)pkt->seq);
            expectedSeq = pkt->seq + 1;
            vPortFree(pkt);
            xSemaphoreTake(stats_mutex, portMAX_DELAY);
            total_received++;
            xSemaphoreGive(stats_mutex);
            CheckAndReportStatsAndStop();
        } else {
            printf("Packet lost at receiver %d: expected seq=%ld (timeout)\n", myId, (long)expectedSeq);
            expectedSeq++;
            xSemaphoreTake(stats_mutex, portMAX_DELAY);
            total_lost++;
            xSemaphoreGive(stats_mutex);
            CheckAndReportStatsAndStop();
        }
    }
}

static void setupQueues(void) {
    qToSwitch = xQueueCreate(QUEUE_SIZE, sizeof(Packet *));
    qToRx3    = xQueueCreate(QUEUE_SIZE, sizeof(Packet *));
    qToRx4    = xQueueCreate(QUEUE_SIZE, sizeof(Packet *));
}













int
main(int argc, char* argv[])
{
	// Add your code here.

	/*blinkLeds[0] = createLed(BLINK_PORT_NUMBER, BLINK_PIN_NUMBER_GREEN, BLINK_ACTIVE_LOW );
	blinkLeds[1] = createLed(BLINK_PORT_NUMBER, BLINK_PIN_NUMBER_ORANGE, BLINK_ACTIVE_LOW );
	blinkLeds[2] = createLed(BLINK_PORT_NUMBER, BLINK_PIN_NUMBER_RED, BLINK_ACTIVE_LOW );
	blinkLeds[3] = createLed(BLINK_PORT_NUMBER, BLINK_PIN_NUMBER_BLUE, BLINK_ACTIVE_LOW );

	for (int i=0; i<4; i++){
		power_up(&blinkLeds[i]);
	}*/

	xTimer1 = xTimerCreate( "Timer1", ( pdMS_TO_TICKS(2000) ), pdFALSE, ( void * ) 0, prvOneShotTimerCallback);
	xTimer2 = xTimerCreate( "Timer2", ( pdMS_TO_TICKS(TIMEOUT_PERIOD) ), pdTRUE, ( void * ) 1, prvAutoReloadTimerCallback);

	if( ( xTimer1 != NULL ) && ( xTimer2 != NULL ) )
	{
		xTimer1Started = xTimerStart( xTimer1, 0 );
		xTimer2Started = xTimerStart( xTimer2, 0 );
	}

	if( xTimer1Started == pdPASS && xTimer2Started == pdPASS)
	{
		BaseType_t status;
	    setupQueues();
	    stats_mutex = xSemaphoreCreateMutex();

	    senderStates[0].myId = 1;
	    senderStates[0].seq3 = 0;
	    senderStates[0].seq4 = 0;
	    senderStates[1].myId = 2;
	    senderStates[1].seq3 = 0;
	    senderStates[1].seq4 = 0;

	    xTaskCreate(SenderTask, "Sender1", 2048, &senderStates[0], 1, NULL);
	    xTaskCreate(SenderTask, "Sender2", 2048, &senderStates[1], 1, NULL);
	    xTaskCreate(ReceiverTask, "Receiver3", 2048, (void*)3, 2, NULL);
	    xTaskCreate(ReceiverTask, "Receiver4", 2048, (void*)4, 2, NULL);
	    xTaskCreate(SwitchTask, "Switch", 2048, NULL, 1, NULL);

		vTaskStartScheduler();
	}

	return 0;
}

#pragma GCC diagnostic pop

// ----------------------------------------------------------------------------

static void prvOneShotTimerCallback( TimerHandle_t xTimer )
{

	turn_on (&blinkLeds[1]);
}

static void prvAutoReloadTimerCallback( TimerHandle_t xTimer )
{



	if(isOn(blinkLeds[0])){
		turn_off(&blinkLeds[0]);
	} else {
		turn_on(&blinkLeds[0]);
	}
}


void vApplicationMallocFailedHook( void )
{
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
	( void ) pcTaskName;
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();

	if( xFreeStackSpace > 100 )
	{
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}

void vApplicationTickHook(void) {
}

StaticTask_t xIdleTaskTCB CCM_RAM;
StackType_t uxIdleTaskStack[configMINIMAL_STACK_SIZE] CCM_RAM;

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
  state will be stored. */
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;

  /* Pass out the array that will be used as the Idle task's stack. */
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;

  /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
}

static StaticTask_t xTimerTaskTCB CCM_RAM;
static StackType_t uxTimerTaskStack[configTIMER_TASK_STACK_DEPTH] CCM_RAM;

/* configUSE_STATIC_ALLOCATION and configUSE_TIMERS are both set to 1, so the
application must provide an implementation of vApplicationGetTimerTaskMemory()
to provide the memory that is used by the Timer service task. */
void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
}
